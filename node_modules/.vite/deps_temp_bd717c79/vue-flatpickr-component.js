import {
  esm_exports,
  init_esm
} from "./chunk-MLERJ4Y7.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/vue-flatpickr-component/dist/vue-flatpickr.js
var require_vue_flatpickr = __commonJS({
  "node_modules/vue-flatpickr-component/dist/vue-flatpickr.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory((init_esm(), __toCommonJS(esm_exports)));
      else if (typeof define === "function" && define.amd)
        define("VueFlatpickr", ["flatpickr"], factory);
      else if (typeof exports === "object")
        exports["VueFlatpickr"] = factory((init_esm(), __toCommonJS(esm_exports)));
      else
        root["VueFlatpickr"] = factory(root["flatpickr"]);
    })(exports, (__WEBPACK_EXTERNAL_MODULE__311__) => {
      return (
        /******/
        (() => {
          "use strict";
          var __webpack_modules__ = {
            /***/
            311: (
              /***/
              (module2) => {
                module2.exports = __WEBPACK_EXTERNAL_MODULE__311__;
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          (() => {
            __webpack_require__.n = (module2) => {
              var getter = module2 && module2.__esModule ? (
                /******/
                () => module2["default"]
              ) : (
                /******/
                () => module2
              );
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          })();
          (() => {
            __webpack_require__.d = (exports2, definition) => {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          })();
          (() => {
            __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
          })();
          var __webpack_exports__ = {};
          (() => {
            __webpack_require__.d(__webpack_exports__, {
              "default": () => (
                /* binding */
                src
              )
            });
            var external_flatpickr_ = __webpack_require__(311);
            var external_flatpickr_default = __webpack_require__.n(external_flatpickr_);
            ;
            var includedEvents = ["onChange", "onClose", "onDestroy", "onMonthChange", "onOpen", "onYearChange"];
            var excludedEvents = ["onValueUpdate", "onDayCreate", "onParseConfig", "onReady", "onPreCalendarPosition", "onKeyDown"];
            ;
            function _extends() {
              _extends = Object.assign ? Object.assign.bind() : function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
            var camelToKebab = function camelToKebab2(string) {
              return string.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
            };
            var arrayify = function arrayify2(obj) {
              return obj instanceof Array ? obj : [obj];
            };
            var nullify = function nullify2(value) {
              return value && value.length ? value : null;
            };
            var cloneObject = function cloneObject2(obj) {
              return _extends({}, obj);
            };
            ;
            var allEvents = includedEvents.concat(excludedEvents);
            var configCallbacks = ["locale", "showMonths"];
            const component = {
              name: "flat-pickr",
              render: function render(el) {
                return el("input", {
                  attrs: {
                    type: "text",
                    "data-input": true
                  },
                  props: {
                    disabled: this.disabled
                  },
                  on: {
                    input: this.onInput
                  }
                });
              },
              props: {
                value: {
                  "default": null,
                  required: true,
                  validator: function validator(value) {
                    return value === null || value instanceof Date || typeof value === "string" || value instanceof String || value instanceof Array || typeof value === "number";
                  }
                },
                // https://flatpickr.js.org/options/
                config: {
                  type: Object,
                  "default": function _default() {
                    return {
                      wrap: false,
                      defaultDate: null
                    };
                  }
                },
                events: {
                  type: Array,
                  "default": function _default() {
                    return includedEvents;
                  }
                },
                disabled: {
                  type: Boolean,
                  "default": false
                }
              },
              data: function data() {
                return {
                  /**
                   * The flatpickr instance
                   */
                  fp: null
                };
              },
              mounted: function mounted() {
                var _this = this;
                if (this.fp) return;
                var safeConfig = cloneObject(this.config);
                this.events.forEach(function(hook) {
                  var globalCallbacks = external_flatpickr_default().defaultConfig[hook] || [];
                  var localCallback = function localCallback2() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }
                    _this.$emit.apply(_this, [camelToKebab(hook)].concat(args));
                  };
                  safeConfig[hook] = arrayify(safeConfig[hook] || []).concat(globalCallbacks, localCallback);
                });
                safeConfig.defaultDate = this.value || safeConfig.defaultDate;
                this.fp = new (external_flatpickr_default())(this.getElem(), safeConfig);
                this.fpInput().addEventListener("blur", this.onBlur);
                this.$on("on-close", this.onClose);
                this.$watch("disabled", this.watchDisabled, {
                  immediate: true
                });
              },
              methods: {
                /**
                 * Get the HTML node where flatpickr to be attached
                 * Bind on parent element if wrap is true
                 */
                getElem: function getElem() {
                  return this.config.wrap ? this.$el.parentNode : this.$el;
                },
                /**
                 * Watch for value changed by date-picker itself and notify parent component
                 *
                 * @param event
                 */
                onInput: function onInput(event) {
                  var _this2 = this;
                  var input = event.target;
                  this.$nextTick(function() {
                    _this2.$emit("input", nullify(input.value));
                  });
                },
                /**
                 * @return HTMLElement
                 */
                fpInput: function fpInput() {
                  return this.fp.altInput || this.fp.input;
                },
                /**
                 * Blur event is required by many validation libraries
                 *
                 * @param event
                 */
                onBlur: function onBlur(event) {
                  this.$emit("blur", nullify(event.target.value));
                },
                /**
                 * Flatpickr does not emit input event in some cases
                 */
                onClose: function onClose(selectedDates, dateStr) {
                  this.$emit("input", nullify(dateStr));
                },
                /**
                 * Watch for the disabled property and sets the value to the real input.
                 *
                 * @param newState
                 */
                watchDisabled: function watchDisabled(newState) {
                  if (newState) {
                    this.fpInput().setAttribute("disabled", newState);
                  } else {
                    this.fpInput().removeAttribute("disabled");
                  }
                }
              },
              watch: {
                /**
                 * Watch for any config changes and redraw date-picker
                 *
                 * @param newConfig Object
                 */
                config: {
                  deep: true,
                  handler: function handler(newConfig) {
                    var _this3 = this;
                    var safeConfig = cloneObject(newConfig);
                    allEvents.forEach(function(hook) {
                      delete safeConfig[hook];
                    });
                    this.fp.set(safeConfig);
                    configCallbacks.forEach(function(name) {
                      if (typeof safeConfig[name] !== "undefined") {
                        _this3.fp.set(name, safeConfig[name]);
                      }
                    });
                  }
                },
                /**
                 * Watch for changes from parent component and update DOM
                 *
                 * @param newValue
                 */
                value: function value(newValue) {
                  if (newValue === nullify(this.$el.value)) return;
                  this.fp && // Notify flatpickr instance that there is a change in value
                  this.fp.setDate(newValue, true);
                }
              },
              /**
               * Free up memory
               */
              beforeDestroy: function beforeDestroy() {
                if (this.fp) {
                  this.fpInput().removeEventListener("blur", this.onBlur);
                  this.fp.destroy();
                  this.fp = null;
                }
              }
            };
            ;
            var Plugin = function Plugin2(Vue, params) {
              var name = "flat-pickr";
              if (typeof params === "string") name = params;
              Vue.component(name, component);
            };
            component.install = Plugin;
            const src = component;
          })();
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        })()
      );
    });
  }
});
export default require_vue_flatpickr();
//# sourceMappingURL=vue-flatpickr-component.js.map
